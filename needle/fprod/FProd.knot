namespace tm, x, y, z : Tm
  - shift: "shift" - subst: "subst"
namespace ty, X, Y, Z : Ty
  - shift: "tshift" - subst: "tsubst"

sort Ty, S, T, U :=
  + tvar {X}
  | tarr T1 T2
  | tall X [X]T
  | tprod T1 T2

sort Tm, s, t, u :=
  + var {x}
  | abs x T [x]t
  | app t1 t2
  | tabs X [X]t
  | tapp t T
  | prod t1 t2
  | lett p t1 [bindPat p]t2

sort Pat, p :=
  | pvar x T
  | pprod p1 [bindPat p1]p2

fun bindPat : Pat -> [tm]
  | pvar x T    -> x
  | pprod p1 p2 -> bindPat p1 , bindPat p2

env Env, G, D :=
  + empty
  | evar : x -> T ; Typing
  | etvar : X ->


relation [Env] PTyping p T, wtp ; bindPat -> Env :=
  | P_Var       :  PTyping (pvar x T) T;
                     bindPat = x -> T
  | P_Prod      :  (wtp1: PTyping p1 T1) ->
                   (wtp2: [bindPat wtp1] PTyping p2 (weaken T2 (bindPat p1))) ->
                   PTyping (pprod p1 p2) (tprod T1 T2);
                     bindPat = bindPat wtp1, bindPat wtp2

relation [Env] Typing t T :=
  + T_Var       :  {x -> T} ->
                   Typing {var x} T
  | T_Abs       :  [x -> T1] Typing t (weaken T2 x) ->
                   Typing (abs x T1 t) (tarr T1 T2)
  | T_App       :  Typing t1 (tarr T11 T12) ->
                   Typing t2 T11 ->
                   Typing (app t1 t2) T12
  | T_Tabs      :  [X -> ] Typing t T -> Typing (tabs X t) (tall X T)
  | T_Tapp      :  Typing t1 (tall X T12) ->
                   Typing (tapp t1 T2) (subst X T2 T12)
  | T_Prod      :  Typing t1 T1 -> Typing t2 T2 ->
                   Typing (prod t1 t2) (tprod T1 T2)
  | T_Let       :  Typing t1 T1 -> (wtp: PTyping p T1) ->
                   [bindPat wtp] Typing t2 (weaken T2 (bindPat p)) ->
                   Typing (lett p t1 t2) T2
