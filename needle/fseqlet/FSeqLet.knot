namespace tm, x, y, z : Tm
  - shift: "shift" - subst: "subst"
namespace ty, X, Y, Z : Ty
  - shift: "tshift" - subst: "tsubst"

sort Ty, S, T, U :=
  + tvar {X}
  | tarr T1 T2
  | tall X [X]T

sort Tm, s, t, u :=
  + var {x}
  | abs x T [x]t
  | app t1 t2
  | tabs X [X]t
  | tapp t T
  | lett d [bind d]t

sort Decls, d :=
  | dnil
  | dcons x t [x]d

fun bind : Decls -> [tm]
  | dnil        -> {}
  | dcons x t d -> x, bind d

env Env, G, D :=
  + empty
  | etvar : X ->
  | evar : x -> T ; Typing


relation [Env] Typing t T :=
  + T_Var       :  {x -> T} ->
                   Typing {var x} T
  | T_Abs       :  [x -> T1] Typing t (weaken T2 x) ->
                   Typing (abs x T1 t) (tarr T1 T2)
  | T_App       :  Typing t1 (tarr T11 T12) ->
                   Typing t2 T11 ->
                   Typing (app t1 t2) T12
  | T_Tabs      :  [X -> ] Typing t T -> Typing (tabs X t) (tall X T)
  | T_Tapp      :  Typing t1 (tall X T12) ->
                   Typing (tapp t1 T2) (subst X T2 T12)
  | T_Let       :  (wd: DTyping d) ->
                   [bind wd] Typing t (weaken T (bind d)) ->
                   Typing (lett d t) T


relation [Env] DTyping d, wd ; bind -> Env :=
  | T_DNil      :  DTyping (dnil) ;
                     bind = {}
  | T_DCons     :  Typing t T -> (wd: [x -> T] DTyping d) ->
                   DTyping (dcons x t d) ;
                     bind = (x -> T), bind wd
